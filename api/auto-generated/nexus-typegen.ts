/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Mutation: {};
  Profile: { // root type
    bio?: string | null; // String
    id: number; // Int!
    liked?: number | null; // Int
    likes?: number | null; // Int
  }
  Query: {};
  User: { // root type
    birthDay?: string | null; // String
    email?: string | null; // String
    id?: number | null; // Int
    name?: string | null; // String
    onlineStatus?: boolean | null; // Boolean
    password?: string | null; // String
    phoneNumber?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    createUser: NexusGenRootTypes['User']; // User!
  }
  Profile: { // field return type
    bio: string | null; // String
    id: number; // Int!
    liked: number | null; // Int
    likes: number | null; // Int
  }
  Query: { // field return type
    getAllUsers: Array<NexusGenRootTypes['User'] | null>; // [User]!
    getUserById: NexusGenRootTypes['User'] | null; // User
    profiles: Array<NexusGenRootTypes['Profile'] | null> | null; // [Profile]
  }
  User: { // field return type
    birthDay: string | null; // String
    email: string | null; // String
    id: number | null; // Int
    name: string | null; // String
    onlineStatus: boolean | null; // Boolean
    password: string | null; // String
    phoneNumber: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: { // field return type name
    createUser: 'User'
  }
  Profile: { // field return type name
    bio: 'String'
    id: 'Int'
    liked: 'Int'
    likes: 'Int'
  }
  Query: { // field return type name
    getAllUsers: 'User'
    getUserById: 'User'
    profiles: 'Profile'
  }
  User: { // field return type name
    birthDay: 'String'
    email: 'String'
    id: 'Int'
    name: 'String'
    onlineStatus: 'Boolean'
    password: 'String'
    phoneNumber: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createUser: { // args
      birthDay: string; // String!
      email: string; // String!
      name: string; // String!
      onlineStatus: boolean; // Boolean!
      password: string; // String!
      phoneNumber: string; // String!
    }
  }
  Query: {
    getUserById: { // args
      id: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}